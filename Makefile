APP_NAME := lsm
SRC := ./...
BIN_DIR := bin
PROJECTNAME := parrot

.PHONY: all build run clean install help test coverage benchmark read write prof cpu goroutines mem

## `help`: Generates this help dialog for the Makefile
help: Makefile
	echo
	sed -n 's/^[ \t]*##//p' $< | column -t -s ':' |  sed -e 's/^//'

## `install`: Fetch dependencies needed to run `parrot`
install:
	@echo "  > Getting dependencies..."
	go get -v ./...
	go mod tidy

## `all`: Default target, builds the project
all: build

## `build`: Build the LSM binary
build:
	go build -o $(BIN_DIR)/$(APP_NAME) .

## `run`: Build and run the binary
run: build
	./$(BIN_DIR)/$(APP_NAME)

## `test`: Run all tests with coverage
test:
	go test $(SRC) -covermode=atomic -coverprofile=./coverage/coverage.txt

## `coverage`: Generate HTML coverage report
coverage:
	go tool cover -html=./coverage/coverage.txt -o ./coverage/coverage.html

## `clean`: Remove build artifacts, logs, and profiles
clean:
	rm -rf ./benchmark/test
	rm -rf ./benchmark/manifest
	rm -rf ./benchmark/*.log
	rm -rf $(BIN_DIR)
	rm -f ./benchmark.test
	rm -f mem.out cpu.out goroutine.prof coverage/coverage.*

## `benchmark`: Run benchmark for read or write (WAL=on/off)
benchmark:
ifeq ($(filter read,$(MAKECMDGOALS)),read)
	@echo "Running read benchmark..."
	go test -bench=BenchmarkMemtable_Read -memprofile=mem.out -cpuprofile=cpu.out ./benchmark

else ifeq ($(filter write,$(MAKECMDGOALS)),write)
	@echo "Running write benchmark..."

ifeq ($(WAL),on)
	@echo "→ WAL enabled: running only WAL benchmark"
	go test -bench=BenchmarkMemtable_Write_With_WAL -memprofile=mem.out -cpuprofile=cpu.out ./benchmark

else ifeq ($(WAL),off)
	@echo "→ WAL disabled: running only non-WAL benchmark"
	go test -bench=BenchmarkMemtable_Write_Without_WAL -memprofile=mem.out -cpuprofile=cpu.out ./benchmark

else
	@echo "→ No WAL flag provided: running both benchmarks"
	go test -bench=BenchmarkMemtable_Write_With_WAL -memprofile=mem.out -cpuprofile=cpu.out ./benchmark
	make clean
	go test -bench=BenchmarkMemtable_Write_Without_WAL -memprofile=mem.out -cpuprofile=cpu.out ./benchmark
endif

else
	@echo "Usage: make benchmark read | write [WAL=on|off]"
endif

## `prof`: Inspect profiles generated by benchmarks
prof:
ifeq ($(filter cpu,$(MAKECMDGOALS)),cpu)
	go tool pprof ./benchmark.test cpu.out
else ifeq ($(filter goroutines,$(MAKECMDGOALS)),goroutines)
	go tool pprof ./benchmark.test goroutine.prof
else ifeq ($(filter mem,$(MAKECMDGOALS)),mem)
	go tool pprof ./benchmark.test mem.out
else
	@echo "Usage: make prof cpu | goroutines | mem"
endif

